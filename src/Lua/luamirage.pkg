/*
   Copyright (C) 2011-2012 by Timotei Dolean <timotei21@gmail.com>

   Part of the Mirage Project https://github.com/timotei/mirage

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY.

   See the COPYING file for more details.
*/
$#include "LuaMirage.hpp"
$#include "../Game.hpp"
$#include "../Components/Model.hpp"
$#include "../Components/GameComponent.hpp"
$#include "../Components/Camera.hpp"
$#include "nvMath.h"
$using namespace nv;

struct vec3f{
	float x,y,z;

	vec3f();
	vec3f(float X, float Y, float Z);
};


struct vec4f{
	float x, y, z, w;

	vec4f();
	vec4f(float X, float Y, float Z, float W);
};


struct matrix4f{
    float _11, _12, _13, _14;
    float _21, _22, _23, _24;
    float _31, _32, _33, _34;
    float _41, _42, _43, _44;
    float _array[16];   
	matrix4f();
}

class GameComponent{
	virtual void draw();
	virtual void update();
	virtual void onKeyPressed(int, int, int, bool);
	virtual void loadScript(std::string path);
	
	vec3f translation;
	vec3f translationPostRotation;
	vec3f rotation;
};

class LuaScript;

class Camera {
	vec3f rotation;
	vec3f position;

	bool useAnimation;

	Camera();
	void update();
	void draw();

	void onKeyPressed(int key, int mouseX, int mouseY, bool special = false);
	void onMouseMoved(int x, int y, bool buttonPressed = true);
	void onMousePressed( int button, int state, int x, int y );

	void loadScript(std::string path);

	matrix4f getViewMatrix();
};

class Model : public GameComponent{
	void update();
	void draw();

	bool loadFromFile(const char* fileName, GLuint mode, bool unitize = true, bool force = false);
	void loadTexture(char* fileName);
	void loadScript(std::string path);

	Model(Game* game);
};

class Game {
	void runGame();

	void onNormalKeyPressed( unsigned char key, int x, int y );
	void onResolutionChanged( int w, int h );
	void onSpecialKeyPressed( int key, int x, int y );
	void onMouseMoved( int x, int y );
	void onMousePressed( int button, int state, int x, int y );
	void onMenuEntrySelected( int id );
	void onExit();
	void updateGame();

	int screenHeight;
	int screenWidth;
}