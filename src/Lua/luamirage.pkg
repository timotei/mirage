$#include "LuaMirage.hpp"
$#include "../Components/Model.hpp"
$#include "../Components/GameComponent.hpp"
$#include "../Components/Camera.hpp"
$#include "nvMath.h"
$using namespace nv;

struct vec3f{
	float x,y,z;

	vec3f();
	vec3f(float X, float Y, float Z);
};


struct vec4f{
	float x, y, z, w;

	vec4f();
	vec4f(float X, float Y, float Z, float W);
};


struct matrix4f{
    float _11, _12, _13, _14;
    float _21, _22, _23, _24;
    float _31, _32, _33, _34;
    float _41, _42, _43, _44;
    float _array[16];   
	matrix4f();
}

class GameComponent{
	virtual void draw( Camera ) {}
	virtual void update() {	}
	
	virtual void onKeyPressed(int, int, int, bool);

	virtual void loadScript(std::string path);
	virtual ~GameComponent();
	
	vec3f translation;
	vec3f translationPostRotation;
	vec3f rotation;
};

class LuaScript;

class Camera {
	vec3f rotation;
	vec3f position;

	bool useAnimation;

	Camera();
	void update();
	void draw();

	void onKeyPressed(int key, int mouseX, int mouseY, bool special = false);
	void onMouseMoved(int x, int y, bool buttonPressed = true);
	void onMousePressed( int button, int state, int x, int y );

	void loadScript(std::string path);

	matrix4f getViewMatrix();
};

class Model : public GameComponent{
	void update();
	void draw(Camera cam);

	bool loadFromFile(const char* fileName, GLuint mode, bool unitize = true, bool force = false);
	void loadTexture(char* fileName);
	void loadScript(std::string path);

	Model();
	~Model();
};
